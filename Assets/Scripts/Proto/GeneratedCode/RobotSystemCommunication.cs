// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/RobotSystemCommunication.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Robotsystemcommunication {

  /// <summary>Holder for reflection information generated from proto/RobotSystemCommunication.proto</summary>
  public static partial class RobotSystemCommunicationReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/RobotSystemCommunication.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RobotSystemCommunicationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRwcm90by9Sb2JvdFN5c3RlbUNvbW11bmljYXRpb24ucHJvdG8SGHJvYm90",
            "c3lzdGVtY29tbXVuaWNhdGlvbiJeChJSb2JvdEFjdGlvblJlcXVlc3QSFwoP",
            "bGVmdE1vdG9yQWN0aW9uGAEgASgFEhgKEHJpZ2h0TW90b3JBY3Rpb24YAiAB",
            "KAUSFQoNYWN0aW9uVGltZW91dBgDIAEoBSJLChNSb2JvdEFjdGlvblJlc3Bv",
            "bnNlEjQKBnN0YXR1cxgBIAEoDjIkLnJvYm90c3lzdGVtY29tbXVuaWNhdGlv",
            "bi5TdGF0dXNUeXBlIhIKEFJvYm90UGluZ1JlcXVlc3QiOgoRUm9ib3RQaW5n",
            "UmVzcG9uc2USEQoJaXBBZGRyZXNzGAEgASgJEhIKCm1hY0FkZHJlc3MYAiAB",
            "KAkinQEKDFJvYm90UmVxdWVzdBINCgVyZXFJZBgBIAEoDRI7CgNhY3QYCiAB",
            "KAsyLC5yb2JvdHN5c3RlbWNvbW11bmljYXRpb24uUm9ib3RBY3Rpb25SZXF1",
            "ZXN0SAASOgoEcGluZxgLIAEoCzIqLnJvYm90c3lzdGVtY29tbXVuaWNhdGlv",
            "bi5Sb2JvdFBpbmdSZXF1ZXN0SABCBQoDcmVxIqEBCg1Sb2JvdFJlc3BvbnNl",
            "Eg0KBXJlcUlkGAEgASgNEjwKA2FjdBgKIAEoCzItLnJvYm90c3lzdGVtY29t",
            "bXVuaWNhdGlvbi5Sb2JvdEFjdGlvblJlc3BvbnNlSAASOwoEcGluZxgLIAEo",
            "CzIrLnJvYm90c3lzdGVtY29tbXVuaWNhdGlvbi5Sb2JvdFBpbmdSZXNwb25z",
            "ZUgAQgYKBHJlc3AiTQoTQnJhaW5BY3Rpb25SZXNwb25zZRI2CgdhY3Rpb25z",
            "GAEgAygLMiUucm9ib3RzeXN0ZW1jb21tdW5pY2F0aW9uLlJvYm90QWN0aW9u",
            "IjQKC1JvYm90QWN0aW9uEg4KBmFjdGlvbhgBIAEoBRIVCg1hcnVjb01hcmtl",
            "cklEGAIgASgFIlIKEkJyYWluQWN0aW9uUmVxdWVzdBI8CgxvYnNlcnZhdGlv",
            "bnMYASADKAsyJi5yb2JvdHN5c3RlbWNvbW11bmljYXRpb24uT2JzZXJ2YXRp",
            "b25zIlsKDE9ic2VydmF0aW9ucxIZChFsb3dlck9ic2VydmF0aW9ucxgBIAMo",
            "AhIZChF1cHBlck9ic2VydmF0aW9ucxgCIAMoAhIVCg1hcnVjb01hcmtlcklE",
            "GAMgASgFIjAKH1NpbXVsYXRpb25TY3JlZW5DYXB0dXJlUmVzcG9uc2USDQoF",
            "aW1hZ2UYASABKAwiiwEKHlNpbXVsYXRpb25TY3JlZW5DYXB0dXJlUmVxdWVz",
            "dBIOCgZoZWlnaHQYASABKAUSDQoFd2lkaHQYAiABKAUSNgoJaW1hZ2VUeXBl",
            "GAMgASgOMiMucm9ib3RzeXN0ZW1jb21tdW5pY2F0aW9uLkltYWdlVHlwZRIS",
            "CgpqcGdRdWFsaXR5GAQgASgFIlEKF1NpbXVsYXRpb25BY3Rpb25SZXF1ZXN0",
            "EjYKB2FjdGlvbnMYASADKAsyJS5yb2JvdHN5c3RlbWNvbW11bmljYXRpb24u",
            "Um9ib3RBY3Rpb24iUAoYU2ltdWxhdGlvbkFjdGlvblJlc3BvbnNlEjQKBnN0",
            "YXR1cxgBIAEoDjIkLnJvYm90c3lzdGVtY29tbXVuaWNhdGlvbi5TdGF0dXNU",
            "eXBlIkMKCVRyYW5zZm9ybRIRCgl4UG9zaXRpb24YASABKAISEQoJeVBvc2l0",
            "aW9uGAIgASgCEhAKCHJvdGF0aW9uGAMgASgCImcKFkZyaWVuZGx5Um9ib3RU",
            "cmFuc2Zvcm0SFQoNYXJ1Y29NYXJrZXJJRBgBIAEoBRI2Cgl0cmFuc2Zvcm0Y",
            "AiABKAsyIy5yb2JvdHN5c3RlbWNvbW11bmljYXRpb24uVHJhbnNmb3JtIsAC",
            "ChJPYnNlcnZhdGlvblJlcXVlc3QSUQoXZnJpZW5kbHlSb2JvdFRyYW5zZm9y",
            "bXMYASADKAsyMC5yb2JvdHN5c3RlbWNvbW11bmljYXRpb24uRnJpZW5kbHlS",
            "b2JvdFRyYW5zZm9ybRJBChRlbmVteVJvYm90VHJhbnNmb3JtcxgCIAMoCzIj",
            "LnJvYm90c3lzdGVtY29tbXVuaWNhdGlvbi5UcmFuc2Zvcm0SSQocbmVnYXRp",
            "dmVFbmVyZ3lDb3JlVHJhbnNmb3JtcxgDIAMoCzIjLnJvYm90c3lzdGVtY29t",
            "bXVuaWNhdGlvbi5UcmFuc2Zvcm0SSQoccG9zaXRpdmVFbmVyZ3lDb3JlVHJh",
            "bnNmb3JtcxgEIAMoCzIjLnJvYm90c3lzdGVtY29tbXVuaWNhdGlvbi5UcmFu",
            "c2Zvcm0iZgoTT2JzZXJ2YXRpb25SZXNwb25zZRI8CgxvYnNlcnZhdGlvbnMY",
            "ASADKAsyJi5yb2JvdHN5c3RlbWNvbW11bmljYXRpb24uT2JzZXJ2YXRpb25z",
            "EhEKCWdhbWVJbWFnZRgCIAEoDCosCgpTdGF0dXNUeXBlEgsKB1VOS05PV04Q",
            "ABIGCgJPSxABEgkKBUVSUk9SEAIqHQoJSW1hZ2VUeXBlEgcKA0pQRxAAEgcK",
            "A1BORxABMnwKDVJvYm90RnJvbnRlbmQSawoKTWFrZUFjdGlvbhIsLnJvYm90",
            "c3lzdGVtY29tbXVuaWNhdGlvbi5Sb2JvdEFjdGlvblJlcXVlc3QaLS5yb2Jv",
            "dHN5c3RlbWNvbW11bmljYXRpb24uUm9ib3RBY3Rpb25SZXNwb25zZSIAMnkK",
            "C0JyYWluU2VydmVyEmoKCUdldEFjdGlvbhIsLnJvYm90c3lzdGVtY29tbXVu",
            "aWNhdGlvbi5CcmFpbkFjdGlvblJlcXVlc3QaLS5yb2JvdHN5c3RlbWNvbW11",
            "bmljYXRpb24uQnJhaW5BY3Rpb25SZXNwb25zZSIAMpUCChBTaW11bGF0aW9u",
            "U2VydmVyEokBChBHZXRTY3JlZW5DYXB0dXJlEjgucm9ib3RzeXN0ZW1jb21t",
            "dW5pY2F0aW9uLlNpbXVsYXRpb25TY3JlZW5DYXB0dXJlUmVxdWVzdBo5LnJv",
            "Ym90c3lzdGVtY29tbXVuaWNhdGlvbi5TaW11bGF0aW9uU2NyZWVuQ2FwdHVy",
            "ZVJlc3BvbnNlIgASdQoKTWFrZUFjdGlvbhIxLnJvYm90c3lzdGVtY29tbXVu",
            "aWNhdGlvbi5TaW11bGF0aW9uQWN0aW9uUmVxdWVzdBoyLnJvYm90c3lzdGVt",
            "Y29tbXVuaWNhdGlvbi5TaW11bGF0aW9uQWN0aW9uUmVzcG9uc2UiADKKAQoW",
            "T2JzZXJ2YXRpb25NYWtlclNlcnZlchJwCg9HZXRPYnNlcnZhdGlvbnMSLC5y",
            "b2JvdHN5c3RlbWNvbW11bmljYXRpb24uT2JzZXJ2YXRpb25SZXF1ZXN0Gi0u",
            "cm9ib3RzeXN0ZW1jb21tdW5pY2F0aW9uLk9ic2VydmF0aW9uUmVzcG9uc2Ui",
            "AGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Robotsystemcommunication.StatusType), typeof(global::Robotsystemcommunication.ImageType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Robotsystemcommunication.RobotActionRequest), global::Robotsystemcommunication.RobotActionRequest.Parser, new[]{ "LeftMotorAction", "RightMotorAction", "ActionTimeout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Robotsystemcommunication.RobotActionResponse), global::Robotsystemcommunication.RobotActionResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Robotsystemcommunication.RobotPingRequest), global::Robotsystemcommunication.RobotPingRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Robotsystemcommunication.RobotPingResponse), global::Robotsystemcommunication.RobotPingResponse.Parser, new[]{ "IpAddress", "MacAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Robotsystemcommunication.RobotRequest), global::Robotsystemcommunication.RobotRequest.Parser, new[]{ "ReqId", "Act", "Ping" }, new[]{ "Req" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Robotsystemcommunication.RobotResponse), global::Robotsystemcommunication.RobotResponse.Parser, new[]{ "ReqId", "Act", "Ping" }, new[]{ "Resp" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Robotsystemcommunication.BrainActionResponse), global::Robotsystemcommunication.BrainActionResponse.Parser, new[]{ "Actions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Robotsystemcommunication.RobotAction), global::Robotsystemcommunication.RobotAction.Parser, new[]{ "Action", "ArucoMarkerID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Robotsystemcommunication.BrainActionRequest), global::Robotsystemcommunication.BrainActionRequest.Parser, new[]{ "Observations" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Robotsystemcommunication.Observations), global::Robotsystemcommunication.Observations.Parser, new[]{ "LowerObservations", "UpperObservations", "ArucoMarkerID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Robotsystemcommunication.SimulationScreenCaptureResponse), global::Robotsystemcommunication.SimulationScreenCaptureResponse.Parser, new[]{ "Image" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Robotsystemcommunication.SimulationScreenCaptureRequest), global::Robotsystemcommunication.SimulationScreenCaptureRequest.Parser, new[]{ "Height", "Widht", "ImageType", "JpgQuality" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Robotsystemcommunication.SimulationActionRequest), global::Robotsystemcommunication.SimulationActionRequest.Parser, new[]{ "Actions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Robotsystemcommunication.SimulationActionResponse), global::Robotsystemcommunication.SimulationActionResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Robotsystemcommunication.Transform), global::Robotsystemcommunication.Transform.Parser, new[]{ "XPosition", "YPosition", "Rotation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Robotsystemcommunication.FriendlyRobotTransform), global::Robotsystemcommunication.FriendlyRobotTransform.Parser, new[]{ "ArucoMarkerID", "Transform" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Robotsystemcommunication.ObservationRequest), global::Robotsystemcommunication.ObservationRequest.Parser, new[]{ "FriendlyRobotTransforms", "EnemyRobotTransforms", "NegativeEnergyCoreTransforms", "PositiveEnergyCoreTransforms" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Robotsystemcommunication.ObservationResponse), global::Robotsystemcommunication.ObservationResponse.Parser, new[]{ "Observations", "GameImage" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// ===============================
  /// COMMUNICATION TO ROBOT FRONTEND
  /// ===============================
  /// </summary>
  public enum StatusType {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("OK")] Ok = 1,
    [pbr::OriginalName("ERROR")] Error = 2,
  }

  public enum ImageType {
    [pbr::OriginalName("JPG")] Jpg = 0,
    [pbr::OriginalName("PNG")] Png = 1,
  }

  #endregion

  #region Messages
  public sealed partial class RobotActionRequest : pb::IMessage<RobotActionRequest> {
    private static readonly pb::MessageParser<RobotActionRequest> _parser = new pb::MessageParser<RobotActionRequest>(() => new RobotActionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotActionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Robotsystemcommunication.RobotSystemCommunicationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotActionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotActionRequest(RobotActionRequest other) : this() {
      leftMotorAction_ = other.leftMotorAction_;
      rightMotorAction_ = other.rightMotorAction_;
      actionTimeout_ = other.actionTimeout_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotActionRequest Clone() {
      return new RobotActionRequest(this);
    }

    /// <summary>Field number for the "leftMotorAction" field.</summary>
    public const int LeftMotorActionFieldNumber = 1;
    private int leftMotorAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftMotorAction {
      get { return leftMotorAction_; }
      set {
        leftMotorAction_ = value;
      }
    }

    /// <summary>Field number for the "rightMotorAction" field.</summary>
    public const int RightMotorActionFieldNumber = 2;
    private int rightMotorAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RightMotorAction {
      get { return rightMotorAction_; }
      set {
        rightMotorAction_ = value;
      }
    }

    /// <summary>Field number for the "actionTimeout" field.</summary>
    public const int ActionTimeoutFieldNumber = 3;
    private int actionTimeout_;
    /// <summary>
    /// timeout of action in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionTimeout {
      get { return actionTimeout_; }
      set {
        actionTimeout_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotActionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotActionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeftMotorAction != other.LeftMotorAction) return false;
      if (RightMotorAction != other.RightMotorAction) return false;
      if (ActionTimeout != other.ActionTimeout) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LeftMotorAction != 0) hash ^= LeftMotorAction.GetHashCode();
      if (RightMotorAction != 0) hash ^= RightMotorAction.GetHashCode();
      if (ActionTimeout != 0) hash ^= ActionTimeout.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LeftMotorAction != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LeftMotorAction);
      }
      if (RightMotorAction != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RightMotorAction);
      }
      if (ActionTimeout != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActionTimeout);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeftMotorAction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftMotorAction);
      }
      if (RightMotorAction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RightMotorAction);
      }
      if (ActionTimeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionTimeout);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotActionRequest other) {
      if (other == null) {
        return;
      }
      if (other.LeftMotorAction != 0) {
        LeftMotorAction = other.LeftMotorAction;
      }
      if (other.RightMotorAction != 0) {
        RightMotorAction = other.RightMotorAction;
      }
      if (other.ActionTimeout != 0) {
        ActionTimeout = other.ActionTimeout;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LeftMotorAction = input.ReadInt32();
            break;
          }
          case 16: {
            RightMotorAction = input.ReadInt32();
            break;
          }
          case 24: {
            ActionTimeout = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RobotActionResponse : pb::IMessage<RobotActionResponse> {
    private static readonly pb::MessageParser<RobotActionResponse> _parser = new pb::MessageParser<RobotActionResponse>(() => new RobotActionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotActionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Robotsystemcommunication.RobotSystemCommunicationReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotActionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotActionResponse(RobotActionResponse other) : this() {
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotActionResponse Clone() {
      return new RobotActionResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Robotsystemcommunication.StatusType status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Robotsystemcommunication.StatusType Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotActionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotActionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotActionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::Robotsystemcommunication.StatusType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RobotPingRequest : pb::IMessage<RobotPingRequest> {
    private static readonly pb::MessageParser<RobotPingRequest> _parser = new pb::MessageParser<RobotPingRequest>(() => new RobotPingRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotPingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Robotsystemcommunication.RobotSystemCommunicationReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotPingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotPingRequest(RobotPingRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotPingRequest Clone() {
      return new RobotPingRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotPingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotPingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotPingRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class RobotPingResponse : pb::IMessage<RobotPingResponse> {
    private static readonly pb::MessageParser<RobotPingResponse> _parser = new pb::MessageParser<RobotPingResponse>(() => new RobotPingResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotPingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Robotsystemcommunication.RobotSystemCommunicationReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotPingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotPingResponse(RobotPingResponse other) : this() {
      ipAddress_ = other.ipAddress_;
      macAddress_ = other.macAddress_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotPingResponse Clone() {
      return new RobotPingResponse(this);
    }

    /// <summary>Field number for the "ipAddress" field.</summary>
    public const int IpAddressFieldNumber = 1;
    private string ipAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpAddress {
      get { return ipAddress_; }
      set {
        ipAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "macAddress" field.</summary>
    public const int MacAddressFieldNumber = 2;
    private string macAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MacAddress {
      get { return macAddress_; }
      set {
        macAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotPingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotPingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IpAddress != other.IpAddress) return false;
      if (MacAddress != other.MacAddress) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
      if (MacAddress.Length != 0) hash ^= MacAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IpAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(IpAddress);
      }
      if (MacAddress.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MacAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddress);
      }
      if (MacAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MacAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotPingResponse other) {
      if (other == null) {
        return;
      }
      if (other.IpAddress.Length != 0) {
        IpAddress = other.IpAddress;
      }
      if (other.MacAddress.Length != 0) {
        MacAddress = other.MacAddress;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            IpAddress = input.ReadString();
            break;
          }
          case 18: {
            MacAddress = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RobotRequest : pb::IMessage<RobotRequest> {
    private static readonly pb::MessageParser<RobotRequest> _parser = new pb::MessageParser<RobotRequest>(() => new RobotRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Robotsystemcommunication.RobotSystemCommunicationReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotRequest(RobotRequest other) : this() {
      reqId_ = other.reqId_;
      switch (other.ReqCase) {
        case ReqOneofCase.Act:
          Act = other.Act.Clone();
          break;
        case ReqOneofCase.Ping:
          Ping = other.Ping.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotRequest Clone() {
      return new RobotRequest(this);
    }

    /// <summary>Field number for the "reqId" field.</summary>
    public const int ReqIdFieldNumber = 1;
    private uint reqId_;
    /// <summary>
    /// This should be an id that will be tied to the response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReqId {
      get { return reqId_; }
      set {
        reqId_ = value;
      }
    }

    /// <summary>Field number for the "act" field.</summary>
    public const int ActFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Robotsystemcommunication.RobotActionRequest Act {
      get { return reqCase_ == ReqOneofCase.Act ? (global::Robotsystemcommunication.RobotActionRequest) req_ : null; }
      set {
        req_ = value;
        reqCase_ = value == null ? ReqOneofCase.None : ReqOneofCase.Act;
      }
    }

    /// <summary>Field number for the "ping" field.</summary>
    public const int PingFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Robotsystemcommunication.RobotPingRequest Ping {
      get { return reqCase_ == ReqOneofCase.Ping ? (global::Robotsystemcommunication.RobotPingRequest) req_ : null; }
      set {
        req_ = value;
        reqCase_ = value == null ? ReqOneofCase.None : ReqOneofCase.Ping;
      }
    }

    private object req_;
    /// <summary>Enum of possible cases for the "req" oneof.</summary>
    public enum ReqOneofCase {
      None = 0,
      Act = 10,
      Ping = 11,
    }
    private ReqOneofCase reqCase_ = ReqOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqOneofCase ReqCase {
      get { return reqCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReq() {
      reqCase_ = ReqOneofCase.None;
      req_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReqId != other.ReqId) return false;
      if (!object.Equals(Act, other.Act)) return false;
      if (!object.Equals(Ping, other.Ping)) return false;
      if (ReqCase != other.ReqCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReqId != 0) hash ^= ReqId.GetHashCode();
      if (reqCase_ == ReqOneofCase.Act) hash ^= Act.GetHashCode();
      if (reqCase_ == ReqOneofCase.Ping) hash ^= Ping.GetHashCode();
      hash ^= (int) reqCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReqId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ReqId);
      }
      if (reqCase_ == ReqOneofCase.Act) {
        output.WriteRawTag(82);
        output.WriteMessage(Act);
      }
      if (reqCase_ == ReqOneofCase.Ping) {
        output.WriteRawTag(90);
        output.WriteMessage(Ping);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReqId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReqId);
      }
      if (reqCase_ == ReqOneofCase.Act) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Act);
      }
      if (reqCase_ == ReqOneofCase.Ping) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ping);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotRequest other) {
      if (other == null) {
        return;
      }
      if (other.ReqId != 0) {
        ReqId = other.ReqId;
      }
      switch (other.ReqCase) {
        case ReqOneofCase.Act:
          if (Act == null) {
            Act = new global::Robotsystemcommunication.RobotActionRequest();
          }
          Act.MergeFrom(other.Act);
          break;
        case ReqOneofCase.Ping:
          if (Ping == null) {
            Ping = new global::Robotsystemcommunication.RobotPingRequest();
          }
          Ping.MergeFrom(other.Ping);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReqId = input.ReadUInt32();
            break;
          }
          case 82: {
            global::Robotsystemcommunication.RobotActionRequest subBuilder = new global::Robotsystemcommunication.RobotActionRequest();
            if (reqCase_ == ReqOneofCase.Act) {
              subBuilder.MergeFrom(Act);
            }
            input.ReadMessage(subBuilder);
            Act = subBuilder;
            break;
          }
          case 90: {
            global::Robotsystemcommunication.RobotPingRequest subBuilder = new global::Robotsystemcommunication.RobotPingRequest();
            if (reqCase_ == ReqOneofCase.Ping) {
              subBuilder.MergeFrom(Ping);
            }
            input.ReadMessage(subBuilder);
            Ping = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class RobotResponse : pb::IMessage<RobotResponse> {
    private static readonly pb::MessageParser<RobotResponse> _parser = new pb::MessageParser<RobotResponse>(() => new RobotResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Robotsystemcommunication.RobotSystemCommunicationReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotResponse(RobotResponse other) : this() {
      reqId_ = other.reqId_;
      switch (other.RespCase) {
        case RespOneofCase.Act:
          Act = other.Act.Clone();
          break;
        case RespOneofCase.Ping:
          Ping = other.Ping.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotResponse Clone() {
      return new RobotResponse(this);
    }

    /// <summary>Field number for the "reqId" field.</summary>
    public const int ReqIdFieldNumber = 1;
    private uint reqId_;
    /// <summary>
    /// This will match the request that the response is for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReqId {
      get { return reqId_; }
      set {
        reqId_ = value;
      }
    }

    /// <summary>Field number for the "act" field.</summary>
    public const int ActFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Robotsystemcommunication.RobotActionResponse Act {
      get { return respCase_ == RespOneofCase.Act ? (global::Robotsystemcommunication.RobotActionResponse) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Act;
      }
    }

    /// <summary>Field number for the "ping" field.</summary>
    public const int PingFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Robotsystemcommunication.RobotPingResponse Ping {
      get { return respCase_ == RespOneofCase.Ping ? (global::Robotsystemcommunication.RobotPingResponse) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Ping;
      }
    }

    private object resp_;
    /// <summary>Enum of possible cases for the "resp" oneof.</summary>
    public enum RespOneofCase {
      None = 0,
      Act = 10,
      Ping = 11,
    }
    private RespOneofCase respCase_ = RespOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespOneofCase RespCase {
      get { return respCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResp() {
      respCase_ = RespOneofCase.None;
      resp_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReqId != other.ReqId) return false;
      if (!object.Equals(Act, other.Act)) return false;
      if (!object.Equals(Ping, other.Ping)) return false;
      if (RespCase != other.RespCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReqId != 0) hash ^= ReqId.GetHashCode();
      if (respCase_ == RespOneofCase.Act) hash ^= Act.GetHashCode();
      if (respCase_ == RespOneofCase.Ping) hash ^= Ping.GetHashCode();
      hash ^= (int) respCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReqId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ReqId);
      }
      if (respCase_ == RespOneofCase.Act) {
        output.WriteRawTag(82);
        output.WriteMessage(Act);
      }
      if (respCase_ == RespOneofCase.Ping) {
        output.WriteRawTag(90);
        output.WriteMessage(Ping);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReqId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReqId);
      }
      if (respCase_ == RespOneofCase.Act) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Act);
      }
      if (respCase_ == RespOneofCase.Ping) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ping);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotResponse other) {
      if (other == null) {
        return;
      }
      if (other.ReqId != 0) {
        ReqId = other.ReqId;
      }
      switch (other.RespCase) {
        case RespOneofCase.Act:
          if (Act == null) {
            Act = new global::Robotsystemcommunication.RobotActionResponse();
          }
          Act.MergeFrom(other.Act);
          break;
        case RespOneofCase.Ping:
          if (Ping == null) {
            Ping = new global::Robotsystemcommunication.RobotPingResponse();
          }
          Ping.MergeFrom(other.Ping);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReqId = input.ReadUInt32();
            break;
          }
          case 82: {
            global::Robotsystemcommunication.RobotActionResponse subBuilder = new global::Robotsystemcommunication.RobotActionResponse();
            if (respCase_ == RespOneofCase.Act) {
              subBuilder.MergeFrom(Act);
            }
            input.ReadMessage(subBuilder);
            Act = subBuilder;
            break;
          }
          case 90: {
            global::Robotsystemcommunication.RobotPingResponse subBuilder = new global::Robotsystemcommunication.RobotPingResponse();
            if (respCase_ == RespOneofCase.Ping) {
              subBuilder.MergeFrom(Ping);
            }
            input.ReadMessage(subBuilder);
            Ping = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// =============================
  /// COMMUNICATION TO BRAIN SERVER
  /// =============================
  /// </summary>
  public sealed partial class BrainActionResponse : pb::IMessage<BrainActionResponse> {
    private static readonly pb::MessageParser<BrainActionResponse> _parser = new pb::MessageParser<BrainActionResponse>(() => new BrainActionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BrainActionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Robotsystemcommunication.RobotSystemCommunicationReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrainActionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrainActionResponse(BrainActionResponse other) : this() {
      actions_ = other.actions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrainActionResponse Clone() {
      return new BrainActionResponse(this);
    }

    /// <summary>Field number for the "actions" field.</summary>
    public const int ActionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Robotsystemcommunication.RobotAction> _repeated_actions_codec
        = pb::FieldCodec.ForMessage(10, global::Robotsystemcommunication.RobotAction.Parser);
    private readonly pbc::RepeatedField<global::Robotsystemcommunication.RobotAction> actions_ = new pbc::RepeatedField<global::Robotsystemcommunication.RobotAction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Robotsystemcommunication.RobotAction> Actions {
      get { return actions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BrainActionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BrainActionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!actions_.Equals(other.actions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= actions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      actions_.WriteTo(output, _repeated_actions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += actions_.CalculateSize(_repeated_actions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BrainActionResponse other) {
      if (other == null) {
        return;
      }
      actions_.Add(other.actions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            actions_.AddEntriesFrom(input, _repeated_actions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RobotAction : pb::IMessage<RobotAction> {
    private static readonly pb::MessageParser<RobotAction> _parser = new pb::MessageParser<RobotAction>(() => new RobotAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Robotsystemcommunication.RobotSystemCommunicationReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotAction(RobotAction other) : this() {
      action_ = other.action_;
      arucoMarkerID_ = other.arucoMarkerID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotAction Clone() {
      return new RobotAction(this);
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 1;
    private int action_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "arucoMarkerID" field.</summary>
    public const int ArucoMarkerIDFieldNumber = 2;
    private int arucoMarkerID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArucoMarkerID {
      get { return arucoMarkerID_; }
      set {
        arucoMarkerID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Action != other.Action) return false;
      if (ArucoMarkerID != other.ArucoMarkerID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Action != 0) hash ^= Action.GetHashCode();
      if (ArucoMarkerID != 0) hash ^= ArucoMarkerID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Action != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Action);
      }
      if (ArucoMarkerID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ArucoMarkerID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Action);
      }
      if (ArucoMarkerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArucoMarkerID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotAction other) {
      if (other == null) {
        return;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.ArucoMarkerID != 0) {
        ArucoMarkerID = other.ArucoMarkerID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Action = input.ReadInt32();
            break;
          }
          case 16: {
            ArucoMarkerID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BrainActionRequest : pb::IMessage<BrainActionRequest> {
    private static readonly pb::MessageParser<BrainActionRequest> _parser = new pb::MessageParser<BrainActionRequest>(() => new BrainActionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BrainActionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Robotsystemcommunication.RobotSystemCommunicationReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrainActionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrainActionRequest(BrainActionRequest other) : this() {
      observations_ = other.observations_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrainActionRequest Clone() {
      return new BrainActionRequest(this);
    }

    /// <summary>Field number for the "observations" field.</summary>
    public const int ObservationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Robotsystemcommunication.Observations> _repeated_observations_codec
        = pb::FieldCodec.ForMessage(10, global::Robotsystemcommunication.Observations.Parser);
    private readonly pbc::RepeatedField<global::Robotsystemcommunication.Observations> observations_ = new pbc::RepeatedField<global::Robotsystemcommunication.Observations>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Robotsystemcommunication.Observations> Observations {
      get { return observations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BrainActionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BrainActionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!observations_.Equals(other.observations_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= observations_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      observations_.WriteTo(output, _repeated_observations_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += observations_.CalculateSize(_repeated_observations_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BrainActionRequest other) {
      if (other == null) {
        return;
      }
      observations_.Add(other.observations_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            observations_.AddEntriesFrom(input, _repeated_observations_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Observations : pb::IMessage<Observations> {
    private static readonly pb::MessageParser<Observations> _parser = new pb::MessageParser<Observations>(() => new Observations());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Observations> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Robotsystemcommunication.RobotSystemCommunicationReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Observations() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Observations(Observations other) : this() {
      lowerObservations_ = other.lowerObservations_.Clone();
      upperObservations_ = other.upperObservations_.Clone();
      arucoMarkerID_ = other.arucoMarkerID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Observations Clone() {
      return new Observations(this);
    }

    /// <summary>Field number for the "lowerObservations" field.</summary>
    public const int LowerObservationsFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_lowerObservations_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> lowerObservations_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> LowerObservations {
      get { return lowerObservations_; }
    }

    /// <summary>Field number for the "upperObservations" field.</summary>
    public const int UpperObservationsFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_upperObservations_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> upperObservations_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> UpperObservations {
      get { return upperObservations_; }
    }

    /// <summary>Field number for the "arucoMarkerID" field.</summary>
    public const int ArucoMarkerIDFieldNumber = 3;
    private int arucoMarkerID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArucoMarkerID {
      get { return arucoMarkerID_; }
      set {
        arucoMarkerID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Observations);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Observations other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!lowerObservations_.Equals(other.lowerObservations_)) return false;
      if(!upperObservations_.Equals(other.upperObservations_)) return false;
      if (ArucoMarkerID != other.ArucoMarkerID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= lowerObservations_.GetHashCode();
      hash ^= upperObservations_.GetHashCode();
      if (ArucoMarkerID != 0) hash ^= ArucoMarkerID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      lowerObservations_.WriteTo(output, _repeated_lowerObservations_codec);
      upperObservations_.WriteTo(output, _repeated_upperObservations_codec);
      if (ArucoMarkerID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ArucoMarkerID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += lowerObservations_.CalculateSize(_repeated_lowerObservations_codec);
      size += upperObservations_.CalculateSize(_repeated_upperObservations_codec);
      if (ArucoMarkerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArucoMarkerID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Observations other) {
      if (other == null) {
        return;
      }
      lowerObservations_.Add(other.lowerObservations_);
      upperObservations_.Add(other.upperObservations_);
      if (other.ArucoMarkerID != 0) {
        ArucoMarkerID = other.ArucoMarkerID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 13: {
            lowerObservations_.AddEntriesFrom(input, _repeated_lowerObservations_codec);
            break;
          }
          case 18:
          case 21: {
            upperObservations_.AddEntriesFrom(input, _repeated_upperObservations_codec);
            break;
          }
          case 24: {
            ArucoMarkerID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ==========================
  /// COMMUNICATION TO SIMULATOR
  /// ==========================
  /// </summary>
  public sealed partial class SimulationScreenCaptureResponse : pb::IMessage<SimulationScreenCaptureResponse> {
    private static readonly pb::MessageParser<SimulationScreenCaptureResponse> _parser = new pb::MessageParser<SimulationScreenCaptureResponse>(() => new SimulationScreenCaptureResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimulationScreenCaptureResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Robotsystemcommunication.RobotSystemCommunicationReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationScreenCaptureResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationScreenCaptureResponse(SimulationScreenCaptureResponse other) : this() {
      image_ = other.image_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationScreenCaptureResponse Clone() {
      return new SimulationScreenCaptureResponse(this);
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 1;
    private pb::ByteString image_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimulationScreenCaptureResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimulationScreenCaptureResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Image != other.Image) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Image.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Image);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Image);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimulationScreenCaptureResponse other) {
      if (other == null) {
        return;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Image = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SimulationScreenCaptureRequest : pb::IMessage<SimulationScreenCaptureRequest> {
    private static readonly pb::MessageParser<SimulationScreenCaptureRequest> _parser = new pb::MessageParser<SimulationScreenCaptureRequest>(() => new SimulationScreenCaptureRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimulationScreenCaptureRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Robotsystemcommunication.RobotSystemCommunicationReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationScreenCaptureRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationScreenCaptureRequest(SimulationScreenCaptureRequest other) : this() {
      height_ = other.height_;
      widht_ = other.widht_;
      imageType_ = other.imageType_;
      jpgQuality_ = other.jpgQuality_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationScreenCaptureRequest Clone() {
      return new SimulationScreenCaptureRequest(this);
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 1;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "widht" field.</summary>
    public const int WidhtFieldNumber = 2;
    private int widht_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Widht {
      get { return widht_; }
      set {
        widht_ = value;
      }
    }

    /// <summary>Field number for the "imageType" field.</summary>
    public const int ImageTypeFieldNumber = 3;
    private global::Robotsystemcommunication.ImageType imageType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Robotsystemcommunication.ImageType ImageType {
      get { return imageType_; }
      set {
        imageType_ = value;
      }
    }

    /// <summary>Field number for the "jpgQuality" field.</summary>
    public const int JpgQualityFieldNumber = 4;
    private int jpgQuality_;
    /// <summary>
    /// Used only if image type is JPG
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JpgQuality {
      get { return jpgQuality_; }
      set {
        jpgQuality_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimulationScreenCaptureRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimulationScreenCaptureRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Height != other.Height) return false;
      if (Widht != other.Widht) return false;
      if (ImageType != other.ImageType) return false;
      if (JpgQuality != other.JpgQuality) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Widht != 0) hash ^= Widht.GetHashCode();
      if (ImageType != 0) hash ^= ImageType.GetHashCode();
      if (JpgQuality != 0) hash ^= JpgQuality.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Height != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Height);
      }
      if (Widht != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Widht);
      }
      if (ImageType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ImageType);
      }
      if (JpgQuality != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(JpgQuality);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (Widht != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Widht);
      }
      if (ImageType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ImageType);
      }
      if (JpgQuality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JpgQuality);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimulationScreenCaptureRequest other) {
      if (other == null) {
        return;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Widht != 0) {
        Widht = other.Widht;
      }
      if (other.ImageType != 0) {
        ImageType = other.ImageType;
      }
      if (other.JpgQuality != 0) {
        JpgQuality = other.JpgQuality;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Height = input.ReadInt32();
            break;
          }
          case 16: {
            Widht = input.ReadInt32();
            break;
          }
          case 24: {
            imageType_ = (global::Robotsystemcommunication.ImageType) input.ReadEnum();
            break;
          }
          case 32: {
            JpgQuality = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SimulationActionRequest : pb::IMessage<SimulationActionRequest> {
    private static readonly pb::MessageParser<SimulationActionRequest> _parser = new pb::MessageParser<SimulationActionRequest>(() => new SimulationActionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimulationActionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Robotsystemcommunication.RobotSystemCommunicationReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationActionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationActionRequest(SimulationActionRequest other) : this() {
      actions_ = other.actions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationActionRequest Clone() {
      return new SimulationActionRequest(this);
    }

    /// <summary>Field number for the "actions" field.</summary>
    public const int ActionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Robotsystemcommunication.RobotAction> _repeated_actions_codec
        = pb::FieldCodec.ForMessage(10, global::Robotsystemcommunication.RobotAction.Parser);
    private readonly pbc::RepeatedField<global::Robotsystemcommunication.RobotAction> actions_ = new pbc::RepeatedField<global::Robotsystemcommunication.RobotAction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Robotsystemcommunication.RobotAction> Actions {
      get { return actions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimulationActionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimulationActionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!actions_.Equals(other.actions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= actions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      actions_.WriteTo(output, _repeated_actions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += actions_.CalculateSize(_repeated_actions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimulationActionRequest other) {
      if (other == null) {
        return;
      }
      actions_.Add(other.actions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            actions_.AddEntriesFrom(input, _repeated_actions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SimulationActionResponse : pb::IMessage<SimulationActionResponse> {
    private static readonly pb::MessageParser<SimulationActionResponse> _parser = new pb::MessageParser<SimulationActionResponse>(() => new SimulationActionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimulationActionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Robotsystemcommunication.RobotSystemCommunicationReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationActionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationActionResponse(SimulationActionResponse other) : this() {
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationActionResponse Clone() {
      return new SimulationActionResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Robotsystemcommunication.StatusType status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Robotsystemcommunication.StatusType Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimulationActionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimulationActionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimulationActionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::Robotsystemcommunication.StatusType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ==================================
  /// COMMUNICATION TO OBSERVATION MAKER
  /// ==================================
  /// </summary>
  public sealed partial class Transform : pb::IMessage<Transform> {
    private static readonly pb::MessageParser<Transform> _parser = new pb::MessageParser<Transform>(() => new Transform());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Robotsystemcommunication.RobotSystemCommunicationReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform(Transform other) : this() {
      xPosition_ = other.xPosition_;
      yPosition_ = other.yPosition_;
      rotation_ = other.rotation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform Clone() {
      return new Transform(this);
    }

    /// <summary>Field number for the "xPosition" field.</summary>
    public const int XPositionFieldNumber = 1;
    private float xPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float XPosition {
      get { return xPosition_; }
      set {
        xPosition_ = value;
      }
    }

    /// <summary>Field number for the "yPosition" field.</summary>
    public const int YPositionFieldNumber = 2;
    private float yPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float YPosition {
      get { return yPosition_; }
      set {
        yPosition_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private float rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XPosition, other.XPosition)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YPosition, other.YPosition)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (XPosition != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XPosition);
      if (YPosition != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YPosition);
      if (Rotation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (XPosition != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(XPosition);
      }
      if (YPosition != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(YPosition);
      }
      if (Rotation != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Rotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (XPosition != 0F) {
        size += 1 + 4;
      }
      if (YPosition != 0F) {
        size += 1 + 4;
      }
      if (Rotation != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transform other) {
      if (other == null) {
        return;
      }
      if (other.XPosition != 0F) {
        XPosition = other.XPosition;
      }
      if (other.YPosition != 0F) {
        YPosition = other.YPosition;
      }
      if (other.Rotation != 0F) {
        Rotation = other.Rotation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            XPosition = input.ReadFloat();
            break;
          }
          case 21: {
            YPosition = input.ReadFloat();
            break;
          }
          case 29: {
            Rotation = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FriendlyRobotTransform : pb::IMessage<FriendlyRobotTransform> {
    private static readonly pb::MessageParser<FriendlyRobotTransform> _parser = new pb::MessageParser<FriendlyRobotTransform>(() => new FriendlyRobotTransform());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FriendlyRobotTransform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Robotsystemcommunication.RobotSystemCommunicationReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendlyRobotTransform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendlyRobotTransform(FriendlyRobotTransform other) : this() {
      arucoMarkerID_ = other.arucoMarkerID_;
      Transform = other.transform_ != null ? other.Transform.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendlyRobotTransform Clone() {
      return new FriendlyRobotTransform(this);
    }

    /// <summary>Field number for the "arucoMarkerID" field.</summary>
    public const int ArucoMarkerIDFieldNumber = 1;
    private int arucoMarkerID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArucoMarkerID {
      get { return arucoMarkerID_; }
      set {
        arucoMarkerID_ = value;
      }
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 2;
    private global::Robotsystemcommunication.Transform transform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Robotsystemcommunication.Transform Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FriendlyRobotTransform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FriendlyRobotTransform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ArucoMarkerID != other.ArucoMarkerID) return false;
      if (!object.Equals(Transform, other.Transform)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ArucoMarkerID != 0) hash ^= ArucoMarkerID.GetHashCode();
      if (transform_ != null) hash ^= Transform.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ArucoMarkerID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ArucoMarkerID);
      }
      if (transform_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Transform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ArucoMarkerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArucoMarkerID);
      }
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FriendlyRobotTransform other) {
      if (other == null) {
        return;
      }
      if (other.ArucoMarkerID != 0) {
        ArucoMarkerID = other.ArucoMarkerID;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          transform_ = new global::Robotsystemcommunication.Transform();
        }
        Transform.MergeFrom(other.Transform);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ArucoMarkerID = input.ReadInt32();
            break;
          }
          case 18: {
            if (transform_ == null) {
              transform_ = new global::Robotsystemcommunication.Transform();
            }
            input.ReadMessage(transform_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObservationRequest : pb::IMessage<ObservationRequest> {
    private static readonly pb::MessageParser<ObservationRequest> _parser = new pb::MessageParser<ObservationRequest>(() => new ObservationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObservationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Robotsystemcommunication.RobotSystemCommunicationReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObservationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObservationRequest(ObservationRequest other) : this() {
      friendlyRobotTransforms_ = other.friendlyRobotTransforms_.Clone();
      enemyRobotTransforms_ = other.enemyRobotTransforms_.Clone();
      negativeEnergyCoreTransforms_ = other.negativeEnergyCoreTransforms_.Clone();
      positiveEnergyCoreTransforms_ = other.positiveEnergyCoreTransforms_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObservationRequest Clone() {
      return new ObservationRequest(this);
    }

    /// <summary>Field number for the "friendlyRobotTransforms" field.</summary>
    public const int FriendlyRobotTransformsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Robotsystemcommunication.FriendlyRobotTransform> _repeated_friendlyRobotTransforms_codec
        = pb::FieldCodec.ForMessage(10, global::Robotsystemcommunication.FriendlyRobotTransform.Parser);
    private readonly pbc::RepeatedField<global::Robotsystemcommunication.FriendlyRobotTransform> friendlyRobotTransforms_ = new pbc::RepeatedField<global::Robotsystemcommunication.FriendlyRobotTransform>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Robotsystemcommunication.FriendlyRobotTransform> FriendlyRobotTransforms {
      get { return friendlyRobotTransforms_; }
    }

    /// <summary>Field number for the "enemyRobotTransforms" field.</summary>
    public const int EnemyRobotTransformsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Robotsystemcommunication.Transform> _repeated_enemyRobotTransforms_codec
        = pb::FieldCodec.ForMessage(18, global::Robotsystemcommunication.Transform.Parser);
    private readonly pbc::RepeatedField<global::Robotsystemcommunication.Transform> enemyRobotTransforms_ = new pbc::RepeatedField<global::Robotsystemcommunication.Transform>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Robotsystemcommunication.Transform> EnemyRobotTransforms {
      get { return enemyRobotTransforms_; }
    }

    /// <summary>Field number for the "negativeEnergyCoreTransforms" field.</summary>
    public const int NegativeEnergyCoreTransformsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Robotsystemcommunication.Transform> _repeated_negativeEnergyCoreTransforms_codec
        = pb::FieldCodec.ForMessage(26, global::Robotsystemcommunication.Transform.Parser);
    private readonly pbc::RepeatedField<global::Robotsystemcommunication.Transform> negativeEnergyCoreTransforms_ = new pbc::RepeatedField<global::Robotsystemcommunication.Transform>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Robotsystemcommunication.Transform> NegativeEnergyCoreTransforms {
      get { return negativeEnergyCoreTransforms_; }
    }

    /// <summary>Field number for the "positiveEnergyCoreTransforms" field.</summary>
    public const int PositiveEnergyCoreTransformsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Robotsystemcommunication.Transform> _repeated_positiveEnergyCoreTransforms_codec
        = pb::FieldCodec.ForMessage(34, global::Robotsystemcommunication.Transform.Parser);
    private readonly pbc::RepeatedField<global::Robotsystemcommunication.Transform> positiveEnergyCoreTransforms_ = new pbc::RepeatedField<global::Robotsystemcommunication.Transform>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Robotsystemcommunication.Transform> PositiveEnergyCoreTransforms {
      get { return positiveEnergyCoreTransforms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObservationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObservationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!friendlyRobotTransforms_.Equals(other.friendlyRobotTransforms_)) return false;
      if(!enemyRobotTransforms_.Equals(other.enemyRobotTransforms_)) return false;
      if(!negativeEnergyCoreTransforms_.Equals(other.negativeEnergyCoreTransforms_)) return false;
      if(!positiveEnergyCoreTransforms_.Equals(other.positiveEnergyCoreTransforms_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= friendlyRobotTransforms_.GetHashCode();
      hash ^= enemyRobotTransforms_.GetHashCode();
      hash ^= negativeEnergyCoreTransforms_.GetHashCode();
      hash ^= positiveEnergyCoreTransforms_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      friendlyRobotTransforms_.WriteTo(output, _repeated_friendlyRobotTransforms_codec);
      enemyRobotTransforms_.WriteTo(output, _repeated_enemyRobotTransforms_codec);
      negativeEnergyCoreTransforms_.WriteTo(output, _repeated_negativeEnergyCoreTransforms_codec);
      positiveEnergyCoreTransforms_.WriteTo(output, _repeated_positiveEnergyCoreTransforms_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += friendlyRobotTransforms_.CalculateSize(_repeated_friendlyRobotTransforms_codec);
      size += enemyRobotTransforms_.CalculateSize(_repeated_enemyRobotTransforms_codec);
      size += negativeEnergyCoreTransforms_.CalculateSize(_repeated_negativeEnergyCoreTransforms_codec);
      size += positiveEnergyCoreTransforms_.CalculateSize(_repeated_positiveEnergyCoreTransforms_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObservationRequest other) {
      if (other == null) {
        return;
      }
      friendlyRobotTransforms_.Add(other.friendlyRobotTransforms_);
      enemyRobotTransforms_.Add(other.enemyRobotTransforms_);
      negativeEnergyCoreTransforms_.Add(other.negativeEnergyCoreTransforms_);
      positiveEnergyCoreTransforms_.Add(other.positiveEnergyCoreTransforms_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            friendlyRobotTransforms_.AddEntriesFrom(input, _repeated_friendlyRobotTransforms_codec);
            break;
          }
          case 18: {
            enemyRobotTransforms_.AddEntriesFrom(input, _repeated_enemyRobotTransforms_codec);
            break;
          }
          case 26: {
            negativeEnergyCoreTransforms_.AddEntriesFrom(input, _repeated_negativeEnergyCoreTransforms_codec);
            break;
          }
          case 34: {
            positiveEnergyCoreTransforms_.AddEntriesFrom(input, _repeated_positiveEnergyCoreTransforms_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObservationResponse : pb::IMessage<ObservationResponse> {
    private static readonly pb::MessageParser<ObservationResponse> _parser = new pb::MessageParser<ObservationResponse>(() => new ObservationResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObservationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Robotsystemcommunication.RobotSystemCommunicationReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObservationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObservationResponse(ObservationResponse other) : this() {
      observations_ = other.observations_.Clone();
      gameImage_ = other.gameImage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObservationResponse Clone() {
      return new ObservationResponse(this);
    }

    /// <summary>Field number for the "observations" field.</summary>
    public const int ObservationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Robotsystemcommunication.Observations> _repeated_observations_codec
        = pb::FieldCodec.ForMessage(10, global::Robotsystemcommunication.Observations.Parser);
    private readonly pbc::RepeatedField<global::Robotsystemcommunication.Observations> observations_ = new pbc::RepeatedField<global::Robotsystemcommunication.Observations>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Robotsystemcommunication.Observations> Observations {
      get { return observations_; }
    }

    /// <summary>Field number for the "gameImage" field.</summary>
    public const int GameImageFieldNumber = 2;
    private pb::ByteString gameImage_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GameImage {
      get { return gameImage_; }
      set {
        gameImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObservationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObservationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!observations_.Equals(other.observations_)) return false;
      if (GameImage != other.GameImage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= observations_.GetHashCode();
      if (GameImage.Length != 0) hash ^= GameImage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      observations_.WriteTo(output, _repeated_observations_codec);
      if (GameImage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(GameImage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += observations_.CalculateSize(_repeated_observations_codec);
      if (GameImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GameImage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObservationResponse other) {
      if (other == null) {
        return;
      }
      observations_.Add(other.observations_);
      if (other.GameImage.Length != 0) {
        GameImage = other.GameImage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            observations_.AddEntriesFrom(input, _repeated_observations_codec);
            break;
          }
          case 18: {
            GameImage = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
