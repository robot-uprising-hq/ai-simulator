// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/RobotSystemCommunication.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Robotsystemcommunication {
  public static partial class RobotFrontend
  {
    static readonly string __ServiceName = "robotsystemcommunication.RobotFrontend";

    static readonly grpc::Marshaller<global::Robotsystemcommunication.RobotActionRequest> __Marshaller_robotsystemcommunication_RobotActionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Robotsystemcommunication.RobotActionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Robotsystemcommunication.RobotActionResponse> __Marshaller_robotsystemcommunication_RobotActionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Robotsystemcommunication.RobotActionResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Robotsystemcommunication.RobotActionRequest, global::Robotsystemcommunication.RobotActionResponse> __Method_MakeAction = new grpc::Method<global::Robotsystemcommunication.RobotActionRequest, global::Robotsystemcommunication.RobotActionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MakeAction",
        __Marshaller_robotsystemcommunication_RobotActionRequest,
        __Marshaller_robotsystemcommunication_RobotActionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Robotsystemcommunication.RobotSystemCommunicationReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of RobotFrontend</summary>
    public abstract partial class RobotFrontendBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Robotsystemcommunication.RobotActionResponse> MakeAction(global::Robotsystemcommunication.RobotActionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RobotFrontend</summary>
    public partial class RobotFrontendClient : grpc::ClientBase<RobotFrontendClient>
    {
      /// <summary>Creates a new client for RobotFrontend</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RobotFrontendClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RobotFrontend that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RobotFrontendClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RobotFrontendClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RobotFrontendClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Robotsystemcommunication.RobotActionResponse MakeAction(global::Robotsystemcommunication.RobotActionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MakeAction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Robotsystemcommunication.RobotActionResponse MakeAction(global::Robotsystemcommunication.RobotActionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MakeAction, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Robotsystemcommunication.RobotActionResponse> MakeActionAsync(global::Robotsystemcommunication.RobotActionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MakeActionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Robotsystemcommunication.RobotActionResponse> MakeActionAsync(global::Robotsystemcommunication.RobotActionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MakeAction, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RobotFrontendClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RobotFrontendClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RobotFrontendBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_MakeAction, serviceImpl.MakeAction).Build();
    }

  }
  public static partial class BrainServer
  {
    static readonly string __ServiceName = "robotsystemcommunication.BrainServer";

    static readonly grpc::Marshaller<global::Robotsystemcommunication.BrainActionRequest> __Marshaller_robotsystemcommunication_BrainActionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Robotsystemcommunication.BrainActionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Robotsystemcommunication.BrainActionResponse> __Marshaller_robotsystemcommunication_BrainActionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Robotsystemcommunication.BrainActionResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Robotsystemcommunication.BrainActionRequest, global::Robotsystemcommunication.BrainActionResponse> __Method_GetAction = new grpc::Method<global::Robotsystemcommunication.BrainActionRequest, global::Robotsystemcommunication.BrainActionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAction",
        __Marshaller_robotsystemcommunication_BrainActionRequest,
        __Marshaller_robotsystemcommunication_BrainActionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Robotsystemcommunication.RobotSystemCommunicationReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of BrainServer</summary>
    public abstract partial class BrainServerBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Robotsystemcommunication.BrainActionResponse> GetAction(global::Robotsystemcommunication.BrainActionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for BrainServer</summary>
    public partial class BrainServerClient : grpc::ClientBase<BrainServerClient>
    {
      /// <summary>Creates a new client for BrainServer</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public BrainServerClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for BrainServer that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public BrainServerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected BrainServerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected BrainServerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Robotsystemcommunication.BrainActionResponse GetAction(global::Robotsystemcommunication.BrainActionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Robotsystemcommunication.BrainActionResponse GetAction(global::Robotsystemcommunication.BrainActionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAction, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Robotsystemcommunication.BrainActionResponse> GetActionAsync(global::Robotsystemcommunication.BrainActionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Robotsystemcommunication.BrainActionResponse> GetActionAsync(global::Robotsystemcommunication.BrainActionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAction, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override BrainServerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BrainServerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(BrainServerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAction, serviceImpl.GetAction).Build();
    }

  }
  public static partial class SimulationServer
  {
    static readonly string __ServiceName = "robotsystemcommunication.SimulationServer";

    static readonly grpc::Marshaller<global::Robotsystemcommunication.SimulationScreenCaptureRequest> __Marshaller_robotsystemcommunication_SimulationScreenCaptureRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Robotsystemcommunication.SimulationScreenCaptureRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Robotsystemcommunication.SimulationScreenCaptureResponse> __Marshaller_robotsystemcommunication_SimulationScreenCaptureResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Robotsystemcommunication.SimulationScreenCaptureResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Robotsystemcommunication.SimulationActionRequest> __Marshaller_robotsystemcommunication_SimulationActionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Robotsystemcommunication.SimulationActionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Robotsystemcommunication.SimulationActionResponse> __Marshaller_robotsystemcommunication_SimulationActionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Robotsystemcommunication.SimulationActionResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Robotsystemcommunication.SimulationScreenCaptureRequest, global::Robotsystemcommunication.SimulationScreenCaptureResponse> __Method_GetScreenCapture = new grpc::Method<global::Robotsystemcommunication.SimulationScreenCaptureRequest, global::Robotsystemcommunication.SimulationScreenCaptureResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetScreenCapture",
        __Marshaller_robotsystemcommunication_SimulationScreenCaptureRequest,
        __Marshaller_robotsystemcommunication_SimulationScreenCaptureResponse);

    static readonly grpc::Method<global::Robotsystemcommunication.SimulationActionRequest, global::Robotsystemcommunication.SimulationActionResponse> __Method_MakeAction = new grpc::Method<global::Robotsystemcommunication.SimulationActionRequest, global::Robotsystemcommunication.SimulationActionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MakeAction",
        __Marshaller_robotsystemcommunication_SimulationActionRequest,
        __Marshaller_robotsystemcommunication_SimulationActionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Robotsystemcommunication.RobotSystemCommunicationReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of SimulationServer</summary>
    public abstract partial class SimulationServerBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Robotsystemcommunication.SimulationScreenCaptureResponse> GetScreenCapture(global::Robotsystemcommunication.SimulationScreenCaptureRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Robotsystemcommunication.SimulationActionResponse> MakeAction(global::Robotsystemcommunication.SimulationActionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SimulationServer</summary>
    public partial class SimulationServerClient : grpc::ClientBase<SimulationServerClient>
    {
      /// <summary>Creates a new client for SimulationServer</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SimulationServerClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SimulationServer that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SimulationServerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SimulationServerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SimulationServerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Robotsystemcommunication.SimulationScreenCaptureResponse GetScreenCapture(global::Robotsystemcommunication.SimulationScreenCaptureRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetScreenCapture(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Robotsystemcommunication.SimulationScreenCaptureResponse GetScreenCapture(global::Robotsystemcommunication.SimulationScreenCaptureRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetScreenCapture, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Robotsystemcommunication.SimulationScreenCaptureResponse> GetScreenCaptureAsync(global::Robotsystemcommunication.SimulationScreenCaptureRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetScreenCaptureAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Robotsystemcommunication.SimulationScreenCaptureResponse> GetScreenCaptureAsync(global::Robotsystemcommunication.SimulationScreenCaptureRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetScreenCapture, null, options, request);
      }
      public virtual global::Robotsystemcommunication.SimulationActionResponse MakeAction(global::Robotsystemcommunication.SimulationActionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MakeAction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Robotsystemcommunication.SimulationActionResponse MakeAction(global::Robotsystemcommunication.SimulationActionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MakeAction, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Robotsystemcommunication.SimulationActionResponse> MakeActionAsync(global::Robotsystemcommunication.SimulationActionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MakeActionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Robotsystemcommunication.SimulationActionResponse> MakeActionAsync(global::Robotsystemcommunication.SimulationActionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MakeAction, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SimulationServerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SimulationServerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SimulationServerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetScreenCapture, serviceImpl.GetScreenCapture)
          .AddMethod(__Method_MakeAction, serviceImpl.MakeAction).Build();
    }

  }
  public static partial class ObservationMakerServer
  {
    static readonly string __ServiceName = "robotsystemcommunication.ObservationMakerServer";

    static readonly grpc::Marshaller<global::Robotsystemcommunication.ObservationRequest> __Marshaller_robotsystemcommunication_ObservationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Robotsystemcommunication.ObservationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Robotsystemcommunication.ObservationResponse> __Marshaller_robotsystemcommunication_ObservationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Robotsystemcommunication.ObservationResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Robotsystemcommunication.ObservationRequest, global::Robotsystemcommunication.ObservationResponse> __Method_GetObservations = new grpc::Method<global::Robotsystemcommunication.ObservationRequest, global::Robotsystemcommunication.ObservationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetObservations",
        __Marshaller_robotsystemcommunication_ObservationRequest,
        __Marshaller_robotsystemcommunication_ObservationResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Robotsystemcommunication.RobotSystemCommunicationReflection.Descriptor.Services[3]; }
    }

    /// <summary>Base class for server-side implementations of ObservationMakerServer</summary>
    public abstract partial class ObservationMakerServerBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Robotsystemcommunication.ObservationResponse> GetObservations(global::Robotsystemcommunication.ObservationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ObservationMakerServer</summary>
    public partial class ObservationMakerServerClient : grpc::ClientBase<ObservationMakerServerClient>
    {
      /// <summary>Creates a new client for ObservationMakerServer</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ObservationMakerServerClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ObservationMakerServer that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ObservationMakerServerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ObservationMakerServerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ObservationMakerServerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Robotsystemcommunication.ObservationResponse GetObservations(global::Robotsystemcommunication.ObservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetObservations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Robotsystemcommunication.ObservationResponse GetObservations(global::Robotsystemcommunication.ObservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetObservations, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Robotsystemcommunication.ObservationResponse> GetObservationsAsync(global::Robotsystemcommunication.ObservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetObservationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Robotsystemcommunication.ObservationResponse> GetObservationsAsync(global::Robotsystemcommunication.ObservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetObservations, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ObservationMakerServerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ObservationMakerServerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ObservationMakerServerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetObservations, serviceImpl.GetObservations).Build();
    }

  }
}
#endregion
